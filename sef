#!/bin/bash

## Banner
function banner() {
    echo "
        ░██████╗███████╗███████╗
        ██╔════╝██╔════╝██╔════╝
        ╚█████╗░█████╗░░█████╗░░
        ░╚═══██╗██╔══╝░░██╔══╝░░
        ██████╔╝███████╗██║░░░░░
        ╚═════╝░╚══════╝╚═╝░░░░░"
    echo ""
    echo  "       @remonsec @KathanP19"
    echo "Subdomain Enumeration Framework"
}

banner

## Variables
list_resolver=resolvers.txt
list_wordlist=2m-subdomains.txt
amass_config=~/.config/amass/config.ini

## Function
function format_time() {
    ((h=${1}/3600))
    ((m=(${1}%3600)/60))
    ((s=${1}%60))
printf "%02d:%02d:%02d\n" $h $m $s
}

function Tool_Check(){
    echo ""
    echo ""
    type -P subfinder &>/dev/null && echo "[*] Subfinder		YES	]" || { echo "[*] Subfinder		NO	]"; }
    type -P assetfinder &>/dev/null && echo "[*] Assetfinder		YES	]" || { echo "[*] Assetfinder		NO	]"; }
    type -P findomain &>/dev/null && echo "[*] Findomain		YES	]" || { echo "[*] Findomain		NO	]"; }
    type -P amass &>/dev/null && echo "[*] Amass		YES	]" || { echo "[*] Amass		NO	]"; }
    type -P shuffledns &>/dev/null && echo "[*] ShuffleDns		YES	]" || { echo "[*] ShuffleDns		NO	]"; }
    type -P massdns &>/dev/null && echo "[*] Massdns		YES	]" || { echo "[*] Massdns		NO	]"; }
    type -P dnsgen &>/dev/null && echo "[*] DnsGen		YES	]" || { echo "[*] DnsGen		NO	]"; }
    type -P anew &>/dev/null && echo "[*] Anew		YES	]" || { echo "[*] Anew		NO ]"; }
    type -P httpx &>/dev/null && echo "[*] Httpx		YES	]" || { echo "[*] Httpx		NO	]"; }
    echo ""
    echo ""
}

Tool_Check

function Passive() {
    subfinder -d $domain -o subfinder.txt -all
    assetfinder --subs-only $domain | sort -u > assetfinder.txt
    amass enum -passive -norecursive -noalts -d $domain -config $amass_config -o amass.txt
    findomain -t $domain -u findomain.txt
    cat subfinder.txt assetfinder.txt amass.txt findomain.txt | grep -F ".$domain" | sort -u > passive.txt
    rm subfinder.txt assetfinder.txt amass.txt findomain.txt
}

function Active() {
    shuffledns -d $domain -w $list_wordlist -r $list_resolver -o active_tmp.txt
    cat active_tmp.txt | grep -F ".$domain" | sed "s/*.//" > active.txt
    rm active_tmp.txt
}

function ActPsv() {
    cat active.txt passive.txt | grep -F ".$domain" | sort -u | shuffledns -d $domain -r $list_resolver -o active_passive.txt
    rm active.txt passive.txt
}

function Permute() {
    if [[ $(cat active_passive.txt | wc -l) -le 50 ]]
    then
        dnsgen active_passive.txt | shuffledns -d $domain -r $list_resolver -o permute1_tmp.txt
        cat permute1_tmp.txt | grep -F ".$domain" > permute1.txt 
        dnsgen permute1.txt | shuffledns -d $domain -r $list_resolver -o permute2_tmp.txt
        cat permute2_tmp.txt | grep -F ".$domain" > permute2.txt
        cat permute1.txt permute2.txt | grep -F ".$domain" | sort -u > permute.txt
        rm permute1.txt permute1_tmp.txt permute2.txt permute2_tmp.txt
    elif [[ $(cat active_passive.txt | wc -l) -le 100 ]]
    then
        dnsgen active_passive.txt | shuffledns -d $domain -r $list_resolver -o permute_tmp.txt
        cat permute_tmp.txt | grep -F ".$domain" > permute.txt
        rm permute_tmp.txt
    else
        echo "[#] No Permutation"
    fi
}

function SubFinal() {
    cat active.txt passive.txt active_passive.txt permute.txt | grep -F ".$domain" | sort -u > sub.txt
}

function Output() {
    mkdir -p $dir
    mv active.txt passive.txt active_passive.txt permute.txt sub.txt sub.httpx $dir
}

function Htpx() {
    httpx -l sub.txt -silent -o sub.httpx
    httpx -l sub.txt -csp-probe -silent | grep -F ".$domain" | anew sub.httpx
    httpx -l sub.txt -tls-probe -silent | grep -F ".$domain" | anew sub.httpx
}


function sefresult() {
    echo ""
    echo ""
    echo "[#] Total Subdomain Found $(cat sub.txt | wc -l)"
    echo "[#] Total HTTP Probed Found $(cat sub.httpx | wc -l)"
    echo "[/] Script completed in total $(format_time $SECONDS)"
}

while getopts ":hd:w:r:o:-:" optchar;do
        case "${optchar}" in
                -)
                        case "${OPTARG}" in
                                dL)
                                        domain_list="${!OPTIND}"; OPTIND=$(( $OPTIND + 1))
                                        ;;
				ac)
                                        amass_config="${!OPTIND}"; OPTIND=$(( $OPTIND + 1))
                                        ;;
				quick)
                                        Passive;
					SubFinal;
					Htpx;
					sefresult;
                                        ;;
				all)
                                        Passive;
					Active;
					ActPsv;
					Permute;
					SubFinal;
					Htpx;
					sefresult;
                                        ;;
                                *)
                                        if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                                        echo "Unknown option --${OPTARG}" >&2
                                        fi
                                        ;;
                        esac;;
                h)
                        echo "Usage: 						"
			echo "       $0 -d       To Specify Domain."
			echo "       $0 -w       To Specify wordlist to use else (Default)."
			echo "       $0 -r       To Specify resolver to use else (Default)."
			echo "       $0 -o       To Store all the result in specific folder."
			echo "       $0 --dL     To Import Domain-list."
                        echo "       $0 --ac     To Specify Amass-config file."
                        echo "       $0 --quick  To quicky perform passive scan of domain."
                        echo "       $0 --all    To fully scan using all functionality."
                        exit 2
                        ;;

                d)	domain=$OPTARG
                        ;;
                w)	list_wordlist=$OPTARG
                        ;;
                r)	list_resolver=$OPTARG
                        ;;
                o)	dir=$OPTARG
			Output
                        ;;
                *)
                        if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
                        echo "Non-option argument: '-${OPTARG}'";
                        fi
                        ;;
        esac
done
